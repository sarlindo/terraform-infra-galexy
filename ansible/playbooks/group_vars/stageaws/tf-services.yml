---
#--------------------------------------------------------------------
# global
#--------------------------------------------------------------------
ans_app_name: galexy
ans_environment: stage
ans_aws_account: awsaccount1
ans_aws_tag_owner: "arlindo santos"
ans_aws_tag_environment: "{{ ans_environment }}"

#--------------------------------------------------------------------
# services
#--------------------------------------------------------------------
ans_tf_services:
  - name: "galexywebappinfra"
    # provider
    aws_provider_region: "us-east-1"
    aws_provider_profile: "ansiblepersonal"
    # state
    terraform_s3_state_bucket: "terraform-up-and-running-state.arlindo.ca"
    terraform_aws_state_key: "{{ ans_aws_account }}/galexywebappinfra/us-east-1/{{ ans_environment }}/terraform.tfstate"
    terraform_state_aws_region: "us-east-1"
    terraform_dynamodb_locktable_name: "terraform-locks"
    # tf project
    terraform_projectpath: "../../terraform-live/galexywebappinfra"
    terraform_planname: "../../terraform-live/galexywebappinfra/plan_galexywebappinfra.out"
    destroy: true
    # rds
    aws_rds_module_source: "terraform-aws-modules/rds/aws"
    aws_rds_module_version: "1.15.0"
    aws_rds_engine: "mysql"
    aws_rds_engine_version: "5.7.19"
    aws_rds_instance_class: "db.t2.large"
    aws_rds_allocated_storage: 5
    aws_rds_storage_encrypted: true
    aws_rds_dbport: 3306
    aws_rds_dbparmgroup: "mysql5.7"
    aws_rds_dbuser: "dbuser1"
    aws_rds_dbpassword: "{{ aws_rds_dbpassword_vault }}"
    aws_rds_maintenance_window: "Mon:00:00-Mon:03:00"
    aws_rds_backup_window: "03:00-06:00"
    aws_rds_backup_retention_period: 0
    # sg
    aws_sg_module_source: "terraform-aws-modules/security-group/aws"
    aws_sg_module_version: "2.0.0"
    aws_sg_security_groups:
       - name: "{{ ans_environment}}-{{ ans_app_name }}-bastionssh-SG"
         modulename: "security-group-bastionssh"
         desc: "This sg is for ssh access for bastion"
         ingress_with_cidr_rules:
           - rule: "ssh-tcp"
             cidr_blocks: "0.0.0.0/0"
       - name: "{{ ans_environment}}-{{ ans_app_name }}-mysql-SG"
         modulename: "security-group-mysql"
         desc: "This sg is for mysql"
         computed_ingress_with_source_security_group_id_rules:
           - rule: "mysql-tcp"
             source_security_group_id: "${module.security-group-app.this_security_group_id}"
           - rule: "mysql-tcp"
             source_security_group_id: "${module.security-group-bastionssh.this_security_group_id}"
       - name: "{{ ans_environment}}-{{ ans_app_name }}-alb-SG"
         modulename: "security-group-alb"
         desc: "This sg is for alb"
         ingress_with_cidr_rules:
           - rule: "http-80-tcp"
             cidr_blocks: "0.0.0.0/0"
           - rule: "https-443-tcp"
             cidr_blocks: "0.0.0.0/0"
       - name: "{{ ans_environment}}-{{ ans_app_name }}-app-SG"
         modulename: "security-group-app"
         desc: "This sg is for app"
         computed_ingress_with_source_security_group_id_rules:
           - rule: "http-80-tcp"
             source_security_group_id: "${module.security-group-alb.this_security_group_id}"
           - rule: "ssh-tcp"
             source_security_group_id: "${module.security-group-bastionssh.this_security_group_id}"

    # alb
    aws_alb_module_source: "terraform-aws-modules/alb/aws"
    aws_alb_module_version: "3.4.0"
    aws_alb_log_location_prefix: "alb-logs"
    aws_alb_tags: '${map("Environment", "{{ ans_aws_tag_environment }}", "Owner", "{{ ans_aws_tag_owner }}")}'
    aws_alb_https_listeners: '${list(map("certificate_arn", "${data.aws_acm_certificate.cert.arn}", "port", 443))}'
    aws_alb_https_listeners_count: "1"
    aws_alb_http_tcp_listeners: '${list(map("port", "80", "protocol", "HTTP"))}'
    aws_alb_http_tcp_listeners_count: "1"
    aws_alb_target_groups: '${list(map("name", "{{ ans_environment}}-{{ ans_app_name }}-TG", "backend_protocol", "HTTP", "backend_port", "80"))}'
    aws_alb_target_groups_count: "1"
    aws_alb_logging_enabled: false
    aws_alb_target_group_port: 80
    aws_alb_cert_domain_name: "*.tsxtrust.com"
    # bastion ec2
    aws_ec2_bastion_module_source: "terraform-aws-modules/ec2-instance/aws"
    aws_ec2_bastion_module_version: "1.5.0"
    aws_ec2_bastion_associate_public_ip_address: true
    aws_ec2_bastion_key_name: "ansible"
    aws_ec2_bastion_instance_type: "t2.micro"
    # ec2 app server
    aws_ec2_appserver_module_source: "terraform-aws-modules/ec2-instance/aws"
    aws_ec2_appserver_module_version: "1.5.0"
    aws_ec2_appserver_key_name: "ansible"
    aws_ec2_appserver_instance_type: "t2.micro"
    aws_ec2_appserver_ebs_block_device_name: "/dev/xvdz"
    aws_ec2_appserver_ebs_block_volume_type: "gp2"
    aws_ec2_appserver_ebs_block_delete_on_termination: true
    aws_ec2_appserver_ebs_block_volume_size: 20
    aws_ec2_appserver_ebs_root_device_name: "/dev/xvdz"
    aws_ec2_appserver_ebs_root_volume_type: "gp2"
    aws_ec2_appserver_ebs_root_delete_on_termination: true
    aws_ec2_appserver_ebs_root_volume_size: 20
    # vpc
    aws_vpc_module_source: "terraform-aws-modules/vpc/aws"
    aws_vpc_module_version: "1.34.0"
    aws_vpc_name: "vpc-{{ ans_environment }}-{{ ans_app_name }}-us-east-1"
    aws_vpc_cidr: "10.10.0.0/16"
    aws_vpc_azs: '"us-east-1a", "us-east-1b"'
    aws_vpc_private_subnets: '"10.10.1.0/24", "10.10.2.0/24"'
    aws_vpc_public_subnets: '"10.10.11.0/24", "10.10.12.0/24"'
    aws_vpc_create_database_subnet_group: false
    aws_vpc_enable_nat_gateway: true
    aws_vpc_enable_vpn_gateway: false
    aws_vpc_enable_s3_endpoint: true
    aws_vpc_enable_dynamodb_endpoint: true
    aws_vpc_enable_dhcp_options: false
